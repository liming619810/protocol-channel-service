// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: option.proto

package option

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Option service

func NewOptionEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Option service

type OptionService interface {
	OptionQueryPage(ctx context.Context, in *OptionQueryPageRequest, opts ...client.CallOption) (*OptionQueryPageResponse, error)
	OptionLogQueryPage(ctx context.Context, in *OptionLogQueryPageRequest, opts ...client.CallOption) (*OptionLogQueryPageResponse, error)
}

type optionService struct {
	c    client.Client
	name string
}

func NewOptionService(name string, c client.Client) OptionService {
	return &optionService{
		c:    c,
		name: name,
	}
}

func (c *optionService) OptionQueryPage(ctx context.Context, in *OptionQueryPageRequest, opts ...client.CallOption) (*OptionQueryPageResponse, error) {
	req := c.c.NewRequest(c.name, "Option.OptionQueryPage", in)
	out := new(OptionQueryPageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionService) OptionLogQueryPage(ctx context.Context, in *OptionLogQueryPageRequest, opts ...client.CallOption) (*OptionLogQueryPageResponse, error) {
	req := c.c.NewRequest(c.name, "Option.OptionLogQueryPage", in)
	out := new(OptionLogQueryPageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Option service

type OptionHandler interface {
	OptionQueryPage(context.Context, *OptionQueryPageRequest, *OptionQueryPageResponse) error
	OptionLogQueryPage(context.Context, *OptionLogQueryPageRequest, *OptionLogQueryPageResponse) error
}

func RegisterOptionHandler(s server.Server, hdlr OptionHandler, opts ...server.HandlerOption) error {
	type option interface {
		OptionQueryPage(ctx context.Context, in *OptionQueryPageRequest, out *OptionQueryPageResponse) error
		OptionLogQueryPage(ctx context.Context, in *OptionLogQueryPageRequest, out *OptionLogQueryPageResponse) error
	}
	type Option struct {
		option
	}
	h := &optionHandler{hdlr}
	return s.Handle(s.NewHandler(&Option{h}, opts...))
}

type optionHandler struct {
	OptionHandler
}

func (h *optionHandler) OptionQueryPage(ctx context.Context, in *OptionQueryPageRequest, out *OptionQueryPageResponse) error {
	return h.OptionHandler.OptionQueryPage(ctx, in, out)
}

func (h *optionHandler) OptionLogQueryPage(ctx context.Context, in *OptionLogQueryPageRequest, out *OptionLogQueryPageResponse) error {
	return h.OptionHandler.OptionLogQueryPage(ctx, in, out)
}
